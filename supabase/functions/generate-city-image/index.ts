import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { cityName } = await req.json()

    if (!cityName) {
      return new Response(
        JSON.stringify({ error: 'City name is required' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400 
        }
      )
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      return new Response(
        JSON.stringify({ error: 'Gemini API key not configured' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 500 
        }
      )
    }

    console.log(`ðŸŽ¨ Generating image for city: ${cityName}`)

    // Create a detailed prompt for generating city images
    const prompt = `Create a beautiful, photorealistic travel poster style image of ${cityName}. The image should capture the essence and iconic landmarks of ${cityName}. Include famous architecture, cityscape, or natural features that make ${cityName} unique and recognizable. The style should be vibrant, inviting, and perfect for a travel website. High quality, professional photography style with good lighting and composition. No text or watermarks in the image.`

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-001:generateImage?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: prompt,
        config: {
          aspectRatio: "16:9",
          seed: Math.floor(Math.random() * 1000000),
          outputFormat: "JPEG"
        }
      }),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Gemini API error:', errorText)
      
      // Fallback to predefined images if API fails
      const fallbackImages: { [key: string]: string } = {
        'mumbai': 'https://images.unsplash.com/photo-1595658658481-d53d3f999875?q=80&w=1000',
        'delhi': 'https://images.unsplash.com/photo-1587474260584-136574528ed5?q=80&w=1000', 
        'bangalore': 'https://images.unsplash.com/photo-1596176530529-78163a4f7af2?q=80&w=1000',
        'paris': 'https://images.unsplash.com/photo-1502602898536-47ad22581b52?q=80&w=1000',
        'london': 'https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?q=80&w=1000',
        'tokyo': 'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?q=80&w=1000',
        'new york': 'https://images.unsplash.com/photo-1496442226666-8d4d0e62e6e9?q=80&w=1000',
        'los angeles': 'https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?q=80&w=1000'
      }
      
      const normalizedCity = cityName.toLowerCase()
      const fallbackImageUrl = fallbackImages[normalizedCity] || 
                              'https://images.unsplash.com/photo-1444927714506-8492d94b5ba0?q=80&w=1000&auto=format&fit=crop'
      
      return new Response(
        JSON.stringify({ 
          success: true,
          imageUrl: fallbackImageUrl,
          isGenerated: false,
          message: 'Used fallback image due to API error'
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    const data = await response.json()
    
    if (!data.generatedImages || !data.generatedImages[0]?.generatedImage?.imageUri) {
      throw new Error('No image generated by Gemini API')
    }

    const imageUri = data.generatedImages[0].generatedImage.imageUri
    console.log(`âœ… Generated image for ${cityName}: ${imageUri}`)

    return new Response(
      JSON.stringify({ 
        success: true,
        imageUrl: imageUri,
        isGenerated: true,
        message: `Generated image for ${cityName}`
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('Error generating city image:', error)
    
    // Fallback to a default travel image on any error
    return new Response(
      JSON.stringify({ 
        success: true,
        imageUrl: 'https://images.unsplash.com/photo-1444927714506-8492d94b5ba0?q=80&w=1000&auto=format&fit=crop',
        isGenerated: false,
        message: 'Used fallback image due to error'
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})